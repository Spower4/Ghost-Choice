'use client'

import { useState } from 'react'
import { Product, BudgetDistribution, SearchSettings } from '@/types'

interface ExportButtonsProps {
  products: Product[]
  budgetDistribution?: BudgetDistribution[]
  totalCost: number
  settings: SearchSettings
  query: string
  className?: string
}

interface ExportData {
  query: string
  products: Product[]
  budgetDistribution?: BudgetDistribution[]
  totalCost: number
  settings: SearchSettings
  exportedAt: string
}

export function ExportButtons({ 
  products, 
  budgetDistribution, 
  totalCost, 
  settings, 
  query,
  className = '' 
}: ExportButtonsProps) {
  const [showExportModal, setShowExportModal] = useState(false)
  const [selectedFormat, setSelectedFormat] = useState<'markdown' | 'plaintext' | 'csv'>('markdown')
  const [copyFeedback, setCopyFeedback] = useState<string | null>(null)

  const formatCurrency = (amount: number, currency: string) => {
    const currencySymbols = {
      USD: '$',
      EUR: '€',
      GBP: '£',
      INR: '₹',
      CAD: 'C$',
      AUD: 'A$'
    } as const

    const symbol = currencySymbols[currency as keyof typeof currencySymbols] || '$'
    return `${symbol}${amount.toLocaleString()}`
  }

  const generateMarkdown = (): string => {
    const exportData: ExportData = {
      query,
      products,
      budgetDistribution,
      totalCost,
      settings,
      exportedAt: new Date().toISOString()
    }

    let markdown = `# ${query} - Product Setup\n\n`
    markdown += `**Generated on:** ${new Date().toLocaleDateString()}\n`
    markdown += `**Total Cost:** ${formatCurrency(totalCost, settings.currency)}\n`
    markdown += `**Style:** ${settings.style}\n`
    markdown += `**Region:** ${settings.region}\n\n`

    if (budgetDistribution && budgetDistribution.length > 0) {
      markdown += `## Budget Distribution\n\n`
      budgetDistribution.forEach(item => {
        markdown += `- **${item.category}:** ${formatCurrency(item.amount, settings.currency)} (${item.percentage.toFixed(1)}%)\n`
      })
      markdown += `\n`
    }

    markdown += `## Products (${products.length})\n\n`
    
    products.forEach((product, index) => {
      markdown += `### ${index + 1}. ${product.title}\n\n`
      markdown += `- **Price:** ${formatCurrency(product.price, product.currency)}\n`
      markdown += `- **Rating:** ${product.rating}/5 (${product.reviewCount.toLocaleString()} reviews)\n`
      markdown += `- **Merchant:** ${product.merchant}\n`
      if (product.category) {
        markdown += `- **Category:** ${product.category}\n`
      }
      markdown += `- **Link:** [View Product](${product.productUrl})\n`
      
      if (product.features && product.features.length > 0) {
        markdown += `- **Features:** ${product.features.join(', ')}\n`
      }
      
      if (product.rationale) {
        markdown += `\n**Why this product:** ${product.rationale}\n`
      }
      
      markdown += `\n---\n\n`
    })

    markdown += `*Generated by Ghost Setup Finder*`
    return markdown
  }

  const generatePlaintext = (): string => {
    let text = `${query.toUpperCase()} - PRODUCT SETUP\n`
    text += `${'='.repeat(query.length + 17)}\n\n`
    text += `Generated on: ${new Date().toLocaleDateString()}\n`
    text += `Total Cost: ${formatCurrency(totalCost, settings.currency)}\n`
    text += `Style: ${settings.style}\n`
    text += `Region: ${settings.region}\n\n`

    if (budgetDistribution && budgetDistribution.length > 0) {
      text += `BUDGET DISTRIBUTION:\n`
      text += `-`.repeat(20) + `\n`
      budgetDistribution.forEach(item => {
        text += `${item.category}: ${formatCurrency(item.amount, settings.currency)} (${item.percentage.toFixed(1)}%)\n`
      })
      text += `\n`
    }

    text += `PRODUCTS (${products.length}):\n`
    text += `-`.repeat(15) + `\n\n`
    
    products.forEach((product, index) => {
      text += `${index + 1}. ${product.title}\n`
      text += `   Price: ${formatCurrency(product.price, product.currency)}\n`
      text += `   Rating: ${product.rating}/5 (${product.reviewCount.toLocaleString()} reviews)\n`
      text += `   Merchant: ${product.merchant}\n`
      if (product.category) {
        text += `   Category: ${product.category}\n`
      }
      text += `   Link: ${product.productUrl}\n`
      
      if (product.features && product.features.length > 0) {
        text += `   Features: ${product.features.join(', ')}\n`
      }
      
      if (product.rationale) {
        text += `   \n   Why this product: ${product.rationale}\n`
      }
      
      text += `\n`
    })

    text += `Generated by Ghost Setup Finder`
    return text
  }

  const generateCSV = (): string => {
    let csv = 'Product Name,Price,Currency,Rating,Reviews,Merchant,Category,Product URL,Features,Rationale\n'
    
    products.forEach(product => {
      const features = product.features ? product.features.join('; ') : ''
      const rationale = product.rationale ? product.rationale.replace(/"/g, '""') : ''
      const title = product.title.replace(/"/g, '""')
      const merchant = product.merchant.replace(/"/g, '""')
      const category = product.category ? product.category.replace(/"/g, '""') : ''
      
      csv += `"${title}",${product.price},"${product.currency}",${product.rating},${product.reviewCount},"${merchant}","${category}","${product.productUrl}","${features}","${rationale}"\n`
    })
    
    return csv
  }

  const handleCopyToClipboard = async (content: string, format: string) => {
    try {
      await navigator.clipboard.writeText(content)
      setCopyFeedback(`${format} copied to clipboard!`)
      setTimeout(() => setCopyFeedback(null), 3000)
    } catch (error) {
      console.error('Failed to copy to clipboard:', error)
      setCopyFeedback('Failed to copy to clipboard')
      setTimeout(() => setCopyFeedback(null), 3000)
    }
  }



  const getExportContent = () => {
    switch (selectedFormat) {
      case 'markdown':
        return generateMarkdown()
      case 'plaintext':
        return generatePlaintext()
      case 'csv':
        return generateCSV()
      default:
        return generateMarkdown()
    }
  }

  const downloadCSV = () => {
    const csvContent = generateCSV()
    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' })
    const link = document.createElement('a')
    const url = URL.createObjectURL(blob)
    link.setAttribute('href', url)
    link.setAttribute('download', `${query.replace(/[^a-z0-9]/gi, '_').toLowerCase()}_products.csv`)
    link.style.visibility = 'hidden'
    document.body.appendChild(link)
    link.click()
    document.body.removeChild(link)
  }

  return (
    <>
      <div className={`flex flex-wrap items-center gap-3 ${className}`}>
        {/* Export Button */}
        <button
          onClick={() => setShowExportModal(true)}
          className="flex items-center space-x-1 px-3 py-2 bg-muted text-muted-foreground rounded-lg hover:bg-accent hover:text-accent-foreground transition-colors duration-200 text-sm"
        >
          <svg className="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
          </svg>
          <span>Export</span>
        </button>

        {/* Copy Feedback */}
        {copyFeedback && (
          <div className="px-3 py-1 bg-green-500/20 text-green-400 border border-green-500/30 text-sm rounded-md">
            {copyFeedback}
          </div>
        )}
      </div>

      {/* Export Modal */}
      {showExportModal && (
        <div className="fixed inset-0 bg-black/70 backdrop-blur-sm flex items-center justify-center p-4 z-50">
          <div className="bg-card border border-border rounded-xl max-w-4xl w-full max-h-[90vh] overflow-hidden shadow-2xl">
            {/* Modal Header */}
            <div className="flex items-center justify-between p-6 border-b border-border">
              <h3 className="text-lg font-semibold text-foreground">Export Setup</h3>
              <button
                onClick={() => setShowExportModal(false)}
                className="text-muted-foreground hover:text-foreground transition-colors"
              >
                <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                </svg>
              </button>
            </div>

            {/* Format Selection */}
            <div className="p-6 border-b border-border">
              <div className="flex space-x-4">
                <button
                  onClick={() => setSelectedFormat('markdown')}
                  className={`px-4 py-2 rounded-lg font-medium transition-colors ${
                    selectedFormat === 'markdown'
                      ? 'bg-primary text-primary-foreground'
                      : 'bg-muted text-muted-foreground hover:bg-accent hover:text-accent-foreground'
                  }`}
                >
                  Markdown
                </button>
                <button
                  onClick={() => setSelectedFormat('plaintext')}
                  className={`px-4 py-2 rounded-lg font-medium transition-colors ${
                    selectedFormat === 'plaintext'
                      ? 'bg-primary text-primary-foreground'
                      : 'bg-muted text-muted-foreground hover:bg-accent hover:text-accent-foreground'
                  }`}
                >
                  Plain Text
                </button>
                <button
                  onClick={() => setSelectedFormat('csv')}
                  className={`px-4 py-2 rounded-lg font-medium transition-colors ${
                    selectedFormat === 'csv'
                      ? 'bg-primary text-primary-foreground'
                      : 'bg-muted text-muted-foreground hover:bg-accent hover:text-accent-foreground'
                  }`}
                >
                  CSV
                </button>
              </div>
            </div>

            {/* Preview */}
            <div className="p-6 flex-1 overflow-auto">
              {selectedFormat === 'csv' ? (
                <div className="text-center py-8">
                  <svg className="w-16 h-16 mx-auto mb-4 text-primary" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                  </svg>
                  <h4 className="text-lg font-medium text-foreground mb-2">CSV Export</h4>
                  <p className="text-muted-foreground mb-4">
                    Download your product data as a CSV file for use in spreadsheet applications.
                  </p>
                  <button
                    onClick={downloadCSV}
                    className="inline-flex items-center space-x-2 px-6 py-3 bg-primary text-primary-foreground rounded-lg hover:bg-primary/90 transition-colors"
                  >
                    <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                    </svg>
                    <span>Download CSV</span>
                  </button>
                </div>
              ) : (
                <div>
                  <div className="flex items-center justify-between mb-4">
                    <h4 className="text-sm font-medium text-foreground">Preview</h4>
                    <button
                      onClick={() => handleCopyToClipboard(getExportContent(), selectedFormat)}
                      className="flex items-center space-x-2 px-3 py-1 bg-muted text-muted-foreground rounded hover:bg-accent hover:text-accent-foreground transition-colors"
                    >
                      <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z" />
                      </svg>
                      <span>Copy</span>
                    </button>
                  </div>
                  <pre className="bg-muted/50 border border-border p-4 rounded-lg text-sm overflow-auto max-h-96 whitespace-pre-wrap text-foreground">
                    {getExportContent()}
                  </pre>
                </div>
              )}
            </div>
          </div>
        </div>
      )}
    </>
  )
}